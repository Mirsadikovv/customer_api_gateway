definitions:
  catalog_service.CreateCategory:
    properties:
      active:
        type: boolean
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      order_no:
        type: integer
      parent_id:
        type: string
    type: object
  catalog_service.UpdateCategory:
    properties:
      active:
        type: boolean
      id:
        type: string
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      order_no:
        type: integer
      parent_id:
        type: string
    type: object
  models.Response:
    properties:
      id: {}
    type: object
  models.ResponseError:
    properties:
      error: {}
    type: object
  models.ResponseSuccess:
    properties:
      data: {}
      metadata: {}
    type: object
  order_product.CreateOrderProducts:
    properties:
      count:
        type: integer
      discount_price:
        type: number
      order_id:
        type: string
      price:
        type: number
      product_id:
        type: string
    type: object
  order_status_notes.CreateStatusRequest:
    properties:
      order_id:
        type: string
      reason:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  order_status_notes.OrderPrimaryStatusKeyRequest:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  orders_service.CreateOrder:
    properties:
      amount:
        type: number
      courier_id:
        type: string
      courier_name:
        type: string
      courier_phone:
        type: string
      customer_id:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      delivery_price:
        type: number
      discount_amount:
        type: number
      external_id:
        type: string
      paid:
        type: boolean
      payment_type:
        type: string
      status:
        type: string
      to_address:
        type: string
      to_location:
        type: string
      type:
        type: string
    type: object
  product_service.CreateProduct:
    properties:
      active:
        type: boolean
      category_id:
        type: string
      description_en:
        type: string
      description_ru:
        type: string
      description_uz:
        type: string
      discount_percent:
        type: number
      in_price:
        type: number
      left_count:
        type: integer
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      order_no:
        type: integer
      out_price:
        type: number
    type: object
  product_service.UpdateProduct:
    properties:
      active:
        type: boolean
      category_id:
        type: string
      description_en:
        type: string
      description_ru:
        type: string
      description_uz:
        type: string
      discount_percent:
        type: number
      id:
        type: string
      in_price:
        type: number
      left_count:
        type: integer
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      order_no:
        type: integer
      out_price:
        type: number
    type: object
  review_service.CreateReview:
    properties:
      customer_id:
        type: string
      order_id:
        type: string
      product_id:
        type: string
      rating:
        type: number
      text:
        type: string
    type: object
info:
  contact: {}
  description: This is a Catalog service server celler server.
  title: Swagger Category Service API
  version: "1.0"
paths:
  /category/create:
    post:
      consumes:
      - application/json
      description: API for creating categories
      parameters:
      - description: category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/catalog_service.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - category
  /category/delete/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - category
  /category/get/{id}:
    get:
      consumes:
      - application/json
      description: API for getting category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get category
      tags:
      - category
  /category/getall:
    get:
      consumes:
      - application/json
      description: API for getting all categories
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all categories
      tags:
      - category
  /category/update:
    put:
      consumes:
      - application/json
      description: API for Updating categories
      parameters:
      - description: category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/catalog_service.UpdateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - category
  /order:
    post:
      consumes:
      - application/json
      description: API for creating a order_product
      parameters:
      - description: Order_Product
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order_product.CreateOrderProducts'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create Order_product
      tags:
      - order_product
  /order-status:
    patch:
      description: This API updates the status of an order by ID
      parameters:
      - description: Order Status
        in: body
        name: orders
        required: true
        schema:
          $ref: '#/definitions/order_status_notes.OrderPrimaryStatusKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update order status by ID
      tags:
      - order_status
    post:
      description: This API create the status of an order
      parameters:
      - description: Order Status
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order_status_notes.CreateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update order status by ID
      tags:
      - order_status
  /order-status/{id}:
    get:
      description: This api get a order by id
      parameters:
      - in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get by id a orderstatus
      tags:
      - order_status
  /order-statusp/{id}:
    get:
      description: This API gets an order by ID
      parameters:
      - description: Order Status ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get by id a orderstatusputch
      tags:
      - order_statusp
  /order/{id}:
    get:
      description: This api get a order by id
      parameters:
      - in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get by id a order
      tags:
      - order_product
  /orders:
    post:
      consumes:
      - application/json
      description: API for creating a order
      parameters:
      - description: Order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/orders_service.CreateOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create Order
      tags:
      - orders
  /orders/{id}:
    get:
      description: This api get a order by id
      parameters:
      - in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get by id a order
      tags:
      - orders
  /product/create:
    post:
      consumes:
      - application/json
      description: API for creating categories
      parameters:
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product_service.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - product
  /product/delete/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting product
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - product
  /product/get/{id}:
    get:
      consumes:
      - application/json
      description: API for getting product
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get product
      tags:
      - product
  /product/getall:
    get:
      consumes:
      - application/json
      description: API for getting all categories
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all categories
      tags:
      - product
  /product/update:
    put:
      consumes:
      - application/json
      description: API for Updating categories
      parameters:
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product_service.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - product
  /review/create:
    post:
      consumes:
      - application/json
      description: API for creating reviews
      parameters:
      - description: review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/review_service.CreateReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create review
      tags:
      - review
  /review/delete/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting review
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete review
      tags:
      - review
  /review/getall/{id}:
    get:
      consumes:
      - application/json
      description: API for getting all reviews
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all reviews
      tags:
      - review
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
